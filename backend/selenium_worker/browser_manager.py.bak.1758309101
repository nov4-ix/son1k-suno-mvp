import os
import logging
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# Intentamos usar undetected_chromedriver; si no, Selenium est√°ndar
try:
    import undetected_chromedriver as uc
    USE_UC = True
except Exception:
    USE_UC = False

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
try:
    from webdriver_manager.chrome import ChromeDriverManager
except Exception:
    ChromeDriverManager = None

def _apply_common_flags(opts: Options, headless: bool):
    if headless:
        opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--window-size=1280,800")
    opts.add_argument("--disable-blink-features=AutomationControlled")

def make_driver(
    headless: bool = True,
    user_data_dir: Optional[str] = None,
    capabilities: Optional[Dict[str, Any]] = None,
    binary_location: Optional[str] = None,
):
    """
    Crea un ChromeDriver compatible con Selenium 4.
    - NO usa desired_capabilities en el constructor.
    - Para 'capabilities', usamos options.set_capability.
    - Soporta undetected_chromedriver si est√° instalado.
    """
    opts = Options()
    _apply_common_flags(opts, headless)

    if user_data_dir:
        opts.add_argument(f"--user-data-dir={user_data_dir}")
    if binary_location:
        opts.binary_location = binary_location

    # Mapea capabilities a options
    if capabilities:
        for k, v in capabilities.items():
            try:
                opts.set_capability(k, v)
            except Exception:
                # Ajuste t√≠pico: loggingPrefs -> goog:loggingPrefs
                if k.lower() == "loggingprefs":
                    opts.set_capability("goog:loggingPrefs", v)

    if USE_UC:
        # undetected_chromedriver no usa Service ni desired_capabilities
        logger.info("üîí Using undetected_chromedriver")
        return uc.Chrome(options=opts)

    # Selenium est√°ndar: con Selenium Manager o webdriver-manager
    if ChromeDriverManager:
        service = Service(ChromeDriverManager().install())
        return webdriver.Chrome(service=service, options=opts)

    # Fallback a Selenium Manager puro
    return webdriver.Chrome(options=opts)

# Interfaz de conveniencia usada por tus tests:
def get_optimized_driver():
    """
    Factory usada en el proyecto para WebDriver 'optimizado'.
    Ajusta aqu√≠ si quieres forzar headless=False o un perfil persistente.
    """
    profile = os.environ.get("SV_CHROME_PROFILE_DIR")  # opcional
    binary = os.environ.get("SV_CHROME_BINARY")        # opcional
    caps = {}  # agrega caps si las necesitas; p.ej. {"goog:loggingPrefs": {"browser":"ALL"}}
    try:
        logger.info("üöÄ Setting up OPTIMIZED Chrome WebDriver for commercial speed...")
        return make_driver(
            headless=(os.environ.get("SV_HEADLESS", "1") == "1"),
            user_data_dir=profile,
            capabilities=caps,
            binary_location=binary
        )
    except Exception as e:
        logger.error(f"‚ùå Failed to setup WebDriver: {e}")
        raise
