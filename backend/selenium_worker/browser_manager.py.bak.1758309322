import os
import logging
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
try:
    from webdriver_manager.chrome import ChromeDriverManager
except Exception:
    ChromeDriverManager = None


def _apply_common_flags(opts: Options, headless: bool):
    if headless:
        opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--disable-gpu")
    opts.add_argument("--window-size=1280,800")
    opts.add_argument("--disable-blink-features=AutomationControlled")


def make_driver(
    headless: bool = True,
    user_data_dir: Optional[str] = None,
    capabilities: Optional[Dict[str, Any]] = None,
    binary_location: Optional[str] = None,
):
    """
    Selenium 4 only. No desired_capabilities in constructor.
    """
    opts = Options()
    _apply_common_flags(opts, headless)

    if user_data_dir:
        opts.add_argument(f"--user-data-dir={user_data_dir}")
    if binary_location:
        opts.binary_location = binary_location

    # map capabilities -> options
    if capabilities:
        for k, v in capabilities.items():
            try:
                opts.set_capability(k, v)
            except Exception:
                if k.lower() == "loggingprefs":
                    opts.set_capability("goog:loggingPrefs", v)

    if ChromeDriverManager:
        service = Service(ChromeDriverManager().install())
        return webdriver.Chrome(service=service, options=opts)

    return webdriver.Chrome(options=opts)


def get_optimized_driver():
    logger.info("ðŸš€ Setting up OPTIMIZED Chrome WebDriver for commercial speed...")
    profile = os.environ.get("SV_CHROME_PROFILE_DIR")
    binary = os.environ.get("SV_CHROME_BINARY")
    caps = {}
    return make_driver(
        headless=(os.environ.get("SV_HEADLESS","1")=="1"),
        user_data_dir=profile,
        capabilities=caps,
        binary_location=binary
    )


class BrowserManager:
    """
    Wrapper compatible con los tests.
    Expone:
      - .driver  (WebDriver)
      - .get_driver()
      - .quit()
      - soporte de context manager
    """
    def __init__(self, headless: bool = True, user_data_dir: str | None = None,
                 binary_location: str | None = None, capabilities: dict | None = None):
        self._headless = headless
        self._user_data_dir = user_data_dir
        self._binary_location = binary_location
        self._capabilities = capabilities or {}
        self.driver = None

    def get_driver(self):
        if self.driver is None:
            self.driver = make_driver(
                headless=self._headless,
                user_data_dir=self._user_data_dir,
                capabilities=self._capabilities,
                binary_location=self._binary_location,
            )
        return self.driver

    def quit(self):
        try:
            if self.driver:
                self.driver.quit()
        finally:
            self.driver = None

    def __enter__(self):
        self.get_driver()
        return self

    def __exit__(self, exc_type, exc, tb):
        self.quit()


__all__ = ["make_driver", "get_optimized_driver", "BrowserManager"]
